services:
  go-server:  # fetcha la configurazione lui dal db, e starta lui i containers necessari con le configurazioni prese dal db
    restart: always
    image: golang:latest
    container_name: go-server
    ports:
      - "8080:8080"
    volumes:
      - .:/go/src/app
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /go/src/app
    env_file:
      - .env
    command: go run main.go
    depends_on:
      - mongo
      - mailserverTest
    networks:
      - mynetwork

  mongo:
    restart: always
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./script/example.sh:/example.sh # not in production
      - ./script/file.js:/file.js # not in production
    env_file:
      - .env
    entrypoint: ["sh", "example.sh"]  # not in production
    command: ["mongod", "--quiet"]  # not in production
    networks:
      - mynetwork

  mailserverTest:
    restart: always
    image: mailhog/mailhog:latest
    container_name: mailserverTest
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - mynetwork

volumes:
  mongo-data:

networks:
  mynetwork:
    driver: bridge